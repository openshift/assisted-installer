// Code generated by go-swagger; DO NOT EDIT.

package events

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	"github.com/openshift/assisted-service/models"
)

// V2ListEventsOKCode is the HTTP code returned for type V2ListEventsOK
const V2ListEventsOKCode int = 200

/*
V2ListEventsOK Success.

swagger:response v2ListEventsOK
*/
type V2ListEventsOK struct {
	/*Count of events retrieved.

	  Minimum: 0
	*/
	EventCount int64 `json:"Event-Count"`
	/*Count of events with severity 'critical'.

	  Minimum: 0
	*/
	SeverityCountCritical int64 `json:"Severity-Count-Critical"`
	/*Count of events with severity 'error'.

	  Minimum: 0
	*/
	SeverityCountError int64 `json:"Severity-Count-Error"`
	/*Count of events with severity 'info'.

	  Minimum: 0
	*/
	SeverityCountInfo int64 `json:"Severity-Count-Info"`
	/*Count of events with severity 'warning'.

	  Minimum: 0
	*/
	SeverityCountWarning int64 `json:"Severity-Count-Warning"`

	/*
	  In: Body
	*/
	Payload models.EventList `json:"body,omitempty"`
}

// NewV2ListEventsOK creates V2ListEventsOK with default headers values
func NewV2ListEventsOK() *V2ListEventsOK {

	return &V2ListEventsOK{}
}

// WithEventCount adds the eventCount to the v2 list events o k response
func (o *V2ListEventsOK) WithEventCount(eventCount int64) *V2ListEventsOK {
	o.EventCount = eventCount
	return o
}

// SetEventCount sets the eventCount to the v2 list events o k response
func (o *V2ListEventsOK) SetEventCount(eventCount int64) {
	o.EventCount = eventCount
}

// WithSeverityCountCritical adds the severityCountCritical to the v2 list events o k response
func (o *V2ListEventsOK) WithSeverityCountCritical(severityCountCritical int64) *V2ListEventsOK {
	o.SeverityCountCritical = severityCountCritical
	return o
}

// SetSeverityCountCritical sets the severityCountCritical to the v2 list events o k response
func (o *V2ListEventsOK) SetSeverityCountCritical(severityCountCritical int64) {
	o.SeverityCountCritical = severityCountCritical
}

// WithSeverityCountError adds the severityCountError to the v2 list events o k response
func (o *V2ListEventsOK) WithSeverityCountError(severityCountError int64) *V2ListEventsOK {
	o.SeverityCountError = severityCountError
	return o
}

// SetSeverityCountError sets the severityCountError to the v2 list events o k response
func (o *V2ListEventsOK) SetSeverityCountError(severityCountError int64) {
	o.SeverityCountError = severityCountError
}

// WithSeverityCountInfo adds the severityCountInfo to the v2 list events o k response
func (o *V2ListEventsOK) WithSeverityCountInfo(severityCountInfo int64) *V2ListEventsOK {
	o.SeverityCountInfo = severityCountInfo
	return o
}

// SetSeverityCountInfo sets the severityCountInfo to the v2 list events o k response
func (o *V2ListEventsOK) SetSeverityCountInfo(severityCountInfo int64) {
	o.SeverityCountInfo = severityCountInfo
}

// WithSeverityCountWarning adds the severityCountWarning to the v2 list events o k response
func (o *V2ListEventsOK) WithSeverityCountWarning(severityCountWarning int64) *V2ListEventsOK {
	o.SeverityCountWarning = severityCountWarning
	return o
}

// SetSeverityCountWarning sets the severityCountWarning to the v2 list events o k response
func (o *V2ListEventsOK) SetSeverityCountWarning(severityCountWarning int64) {
	o.SeverityCountWarning = severityCountWarning
}

// WithPayload adds the payload to the v2 list events o k response
func (o *V2ListEventsOK) WithPayload(payload models.EventList) *V2ListEventsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the v2 list events o k response
func (o *V2ListEventsOK) SetPayload(payload models.EventList) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *V2ListEventsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Event-Count

	eventCount := swag.FormatInt64(o.EventCount)
	if eventCount != "" {
		rw.Header().Set("Event-Count", eventCount)
	}

	// response header Severity-Count-Critical

	severityCountCritical := swag.FormatInt64(o.SeverityCountCritical)
	if severityCountCritical != "" {
		rw.Header().Set("Severity-Count-Critical", severityCountCritical)
	}

	// response header Severity-Count-Error

	severityCountError := swag.FormatInt64(o.SeverityCountError)
	if severityCountError != "" {
		rw.Header().Set("Severity-Count-Error", severityCountError)
	}

	// response header Severity-Count-Info

	severityCountInfo := swag.FormatInt64(o.SeverityCountInfo)
	if severityCountInfo != "" {
		rw.Header().Set("Severity-Count-Info", severityCountInfo)
	}

	// response header Severity-Count-Warning

	severityCountWarning := swag.FormatInt64(o.SeverityCountWarning)
	if severityCountWarning != "" {
		rw.Header().Set("Severity-Count-Warning", severityCountWarning)
	}

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = models.EventList{}
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// V2ListEventsUnauthorizedCode is the HTTP code returned for type V2ListEventsUnauthorized
const V2ListEventsUnauthorizedCode int = 401

/*
V2ListEventsUnauthorized Unauthorized.

swagger:response v2ListEventsUnauthorized
*/
type V2ListEventsUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.InfraError `json:"body,omitempty"`
}

// NewV2ListEventsUnauthorized creates V2ListEventsUnauthorized with default headers values
func NewV2ListEventsUnauthorized() *V2ListEventsUnauthorized {

	return &V2ListEventsUnauthorized{}
}

// WithPayload adds the payload to the v2 list events unauthorized response
func (o *V2ListEventsUnauthorized) WithPayload(payload *models.InfraError) *V2ListEventsUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the v2 list events unauthorized response
func (o *V2ListEventsUnauthorized) SetPayload(payload *models.InfraError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *V2ListEventsUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// V2ListEventsForbiddenCode is the HTTP code returned for type V2ListEventsForbidden
const V2ListEventsForbiddenCode int = 403

/*
V2ListEventsForbidden Forbidden.

swagger:response v2ListEventsForbidden
*/
type V2ListEventsForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.InfraError `json:"body,omitempty"`
}

// NewV2ListEventsForbidden creates V2ListEventsForbidden with default headers values
func NewV2ListEventsForbidden() *V2ListEventsForbidden {

	return &V2ListEventsForbidden{}
}

// WithPayload adds the payload to the v2 list events forbidden response
func (o *V2ListEventsForbidden) WithPayload(payload *models.InfraError) *V2ListEventsForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the v2 list events forbidden response
func (o *V2ListEventsForbidden) SetPayload(payload *models.InfraError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *V2ListEventsForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// V2ListEventsNotFoundCode is the HTTP code returned for type V2ListEventsNotFound
const V2ListEventsNotFoundCode int = 404

/*
V2ListEventsNotFound Error.

swagger:response v2ListEventsNotFound
*/
type V2ListEventsNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewV2ListEventsNotFound creates V2ListEventsNotFound with default headers values
func NewV2ListEventsNotFound() *V2ListEventsNotFound {

	return &V2ListEventsNotFound{}
}

// WithPayload adds the payload to the v2 list events not found response
func (o *V2ListEventsNotFound) WithPayload(payload *models.Error) *V2ListEventsNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the v2 list events not found response
func (o *V2ListEventsNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *V2ListEventsNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// V2ListEventsMethodNotAllowedCode is the HTTP code returned for type V2ListEventsMethodNotAllowed
const V2ListEventsMethodNotAllowedCode int = 405

/*
V2ListEventsMethodNotAllowed Method Not Allowed.

swagger:response v2ListEventsMethodNotAllowed
*/
type V2ListEventsMethodNotAllowed struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewV2ListEventsMethodNotAllowed creates V2ListEventsMethodNotAllowed with default headers values
func NewV2ListEventsMethodNotAllowed() *V2ListEventsMethodNotAllowed {

	return &V2ListEventsMethodNotAllowed{}
}

// WithPayload adds the payload to the v2 list events method not allowed response
func (o *V2ListEventsMethodNotAllowed) WithPayload(payload *models.Error) *V2ListEventsMethodNotAllowed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the v2 list events method not allowed response
func (o *V2ListEventsMethodNotAllowed) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *V2ListEventsMethodNotAllowed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// V2ListEventsInternalServerErrorCode is the HTTP code returned for type V2ListEventsInternalServerError
const V2ListEventsInternalServerErrorCode int = 500

/*
V2ListEventsInternalServerError Error.

swagger:response v2ListEventsInternalServerError
*/
type V2ListEventsInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewV2ListEventsInternalServerError creates V2ListEventsInternalServerError with default headers values
func NewV2ListEventsInternalServerError() *V2ListEventsInternalServerError {

	return &V2ListEventsInternalServerError{}
}

// WithPayload adds the payload to the v2 list events internal server error response
func (o *V2ListEventsInternalServerError) WithPayload(payload *models.Error) *V2ListEventsInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the v2 list events internal server error response
func (o *V2ListEventsInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *V2ListEventsInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
