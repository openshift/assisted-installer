// Code generated by go-swagger; DO NOT EDIT.

package events

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewV2ListEventsParams creates a new V2ListEventsParams object
// with the default values initialized.
func NewV2ListEventsParams() V2ListEventsParams {

	var (
		// initialize parameters with default values

		orderDefault = string("ascending")
	)

	return V2ListEventsParams{
		Order: &orderDefault,
	}
}

// V2ListEventsParams contains all the bound params for the v2 list events operation
// typically these are obtained from a http.Request
//
// swagger:parameters v2ListEvents
type V2ListEventsParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*A comma-separated list of event categories.
	  In: query
	*/
	Categories []string
	/*The cluster to return events for.
	  In: query
	*/
	ClusterID *strfmt.UUID
	/*Cluster level events flag.
	  In: query
	*/
	ClusterLevel *bool
	/*Deleted hosts flag.
	  In: query
	*/
	DeletedHosts *bool
	/*A host in the specified cluster to return events for (DEPRECATED. Use `host_ids` instead).
	  In: query
	*/
	HostID *strfmt.UUID
	/*Hosts in the specified cluster to return events for.
	  In: query
	*/
	HostIds []strfmt.UUID
	/*The infra-env to return events for.
	  In: query
	*/
	InfraEnvID *strfmt.UUID
	/*The maximum number of records to retrieve.
	  In: query
	*/
	Limit *int64
	/*Retrieved events message pattern.
	  In: query
	*/
	Message *string
	/*Number of records to skip before starting to return the records.
	  In: query
	*/
	Offset *int64
	/*Order by event_time of events retrieved.
	  In: query
	  Default: "ascending"
	*/
	Order *string
	/*Retrieved events severities.
	  In: query
	*/
	Severities []string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewV2ListEventsParams() beforehand.
func (o *V2ListEventsParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qCategories, qhkCategories, _ := qs.GetOK("categories")
	if err := o.bindCategories(qCategories, qhkCategories, route.Formats); err != nil {
		res = append(res, err)
	}

	qClusterID, qhkClusterID, _ := qs.GetOK("cluster_id")
	if err := o.bindClusterID(qClusterID, qhkClusterID, route.Formats); err != nil {
		res = append(res, err)
	}

	qClusterLevel, qhkClusterLevel, _ := qs.GetOK("cluster_level")
	if err := o.bindClusterLevel(qClusterLevel, qhkClusterLevel, route.Formats); err != nil {
		res = append(res, err)
	}

	qDeletedHosts, qhkDeletedHosts, _ := qs.GetOK("deleted_hosts")
	if err := o.bindDeletedHosts(qDeletedHosts, qhkDeletedHosts, route.Formats); err != nil {
		res = append(res, err)
	}

	qHostID, qhkHostID, _ := qs.GetOK("host_id")
	if err := o.bindHostID(qHostID, qhkHostID, route.Formats); err != nil {
		res = append(res, err)
	}

	qHostIds, qhkHostIds, _ := qs.GetOK("host_ids")
	if err := o.bindHostIds(qHostIds, qhkHostIds, route.Formats); err != nil {
		res = append(res, err)
	}

	qInfraEnvID, qhkInfraEnvID, _ := qs.GetOK("infra_env_id")
	if err := o.bindInfraEnvID(qInfraEnvID, qhkInfraEnvID, route.Formats); err != nil {
		res = append(res, err)
	}

	qLimit, qhkLimit, _ := qs.GetOK("limit")
	if err := o.bindLimit(qLimit, qhkLimit, route.Formats); err != nil {
		res = append(res, err)
	}

	qMessage, qhkMessage, _ := qs.GetOK("message")
	if err := o.bindMessage(qMessage, qhkMessage, route.Formats); err != nil {
		res = append(res, err)
	}

	qOffset, qhkOffset, _ := qs.GetOK("offset")
	if err := o.bindOffset(qOffset, qhkOffset, route.Formats); err != nil {
		res = append(res, err)
	}

	qOrder, qhkOrder, _ := qs.GetOK("order")
	if err := o.bindOrder(qOrder, qhkOrder, route.Formats); err != nil {
		res = append(res, err)
	}

	qSeverities, qhkSeverities, _ := qs.GetOK("severities")
	if err := o.bindSeverities(qSeverities, qhkSeverities, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindCategories binds and validates array parameter Categories from query.
//
// Arrays are parsed according to CollectionFormat: "" (defaults to "csv" when empty).
func (o *V2ListEventsParams) bindCategories(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var qvCategories string
	if len(rawData) > 0 {
		qvCategories = rawData[len(rawData)-1]
	}

	// CollectionFormat:
	categoriesIC := swag.SplitByFormat(qvCategories, "")
	if len(categoriesIC) == 0 {
		return nil
	}

	var categoriesIR []string
	for _, categoriesIV := range categoriesIC {
		categoriesI := categoriesIV

		categoriesIR = append(categoriesIR, categoriesI)
	}

	o.Categories = categoriesIR

	return nil
}

// bindClusterID binds and validates parameter ClusterID from query.
func (o *V2ListEventsParams) bindClusterID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	// Format: uuid
	value, err := formats.Parse("uuid", raw)
	if err != nil {
		return errors.InvalidType("cluster_id", "query", "strfmt.UUID", raw)
	}
	o.ClusterID = (value.(*strfmt.UUID))

	if err := o.validateClusterID(formats); err != nil {
		return err
	}

	return nil
}

// validateClusterID carries on validations for parameter ClusterID
func (o *V2ListEventsParams) validateClusterID(formats strfmt.Registry) error {

	if err := validate.FormatOf("cluster_id", "query", "uuid", o.ClusterID.String(), formats); err != nil {
		return err
	}
	return nil
}

// bindClusterLevel binds and validates parameter ClusterLevel from query.
func (o *V2ListEventsParams) bindClusterLevel(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("cluster_level", "query", "bool", raw)
	}
	o.ClusterLevel = &value

	return nil
}

// bindDeletedHosts binds and validates parameter DeletedHosts from query.
func (o *V2ListEventsParams) bindDeletedHosts(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("deleted_hosts", "query", "bool", raw)
	}
	o.DeletedHosts = &value

	return nil
}

// bindHostID binds and validates parameter HostID from query.
func (o *V2ListEventsParams) bindHostID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	// Format: uuid
	value, err := formats.Parse("uuid", raw)
	if err != nil {
		return errors.InvalidType("host_id", "query", "strfmt.UUID", raw)
	}
	o.HostID = (value.(*strfmt.UUID))

	if err := o.validateHostID(formats); err != nil {
		return err
	}

	return nil
}

// validateHostID carries on validations for parameter HostID
func (o *V2ListEventsParams) validateHostID(formats strfmt.Registry) error {

	if err := validate.FormatOf("host_id", "query", "uuid", o.HostID.String(), formats); err != nil {
		return err
	}
	return nil
}

// bindHostIds binds and validates array parameter HostIds from query.
//
// Arrays are parsed according to CollectionFormat: "" (defaults to "csv" when empty).
func (o *V2ListEventsParams) bindHostIds(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var qvHostIds string
	if len(rawData) > 0 {
		qvHostIds = rawData[len(rawData)-1]
	}

	// CollectionFormat:
	hostIdsIC := swag.SplitByFormat(qvHostIds, "")
	if len(hostIdsIC) == 0 {
		return nil
	}

	var hostIdsIR []strfmt.UUID
	for i, hostIdsIV := range hostIdsIC {
		// items.Format: "uuid"
		value, err := formats.Parse("uuid", hostIdsIV)
		if err != nil {
			return errors.InvalidType(fmt.Sprintf("%s.%v", "host_ids", i), "query", "strfmt.UUID", value)
		}
		hostIdsI := *(value.(*strfmt.UUID))

		if err := validate.FormatOf(fmt.Sprintf("%s.%v", "host_ids", i), "query", "uuid", hostIdsI.String(), formats); err != nil {
			return err
		}
		hostIdsIR = append(hostIdsIR, hostIdsI)
	}

	o.HostIds = hostIdsIR

	return nil
}

// bindInfraEnvID binds and validates parameter InfraEnvID from query.
func (o *V2ListEventsParams) bindInfraEnvID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	// Format: uuid
	value, err := formats.Parse("uuid", raw)
	if err != nil {
		return errors.InvalidType("infra_env_id", "query", "strfmt.UUID", raw)
	}
	o.InfraEnvID = (value.(*strfmt.UUID))

	if err := o.validateInfraEnvID(formats); err != nil {
		return err
	}

	return nil
}

// validateInfraEnvID carries on validations for parameter InfraEnvID
func (o *V2ListEventsParams) validateInfraEnvID(formats strfmt.Registry) error {

	if err := validate.FormatOf("infra_env_id", "query", "uuid", o.InfraEnvID.String(), formats); err != nil {
		return err
	}
	return nil
}

// bindLimit binds and validates parameter Limit from query.
func (o *V2ListEventsParams) bindLimit(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("limit", "query", "int64", raw)
	}
	o.Limit = &value

	return nil
}

// bindMessage binds and validates parameter Message from query.
func (o *V2ListEventsParams) bindMessage(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Message = &raw

	return nil
}

// bindOffset binds and validates parameter Offset from query.
func (o *V2ListEventsParams) bindOffset(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("offset", "query", "int64", raw)
	}
	o.Offset = &value

	return nil
}

// bindOrder binds and validates parameter Order from query.
func (o *V2ListEventsParams) bindOrder(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewV2ListEventsParams()
		return nil
	}
	o.Order = &raw

	if err := o.validateOrder(formats); err != nil {
		return err
	}

	return nil
}

// validateOrder carries on validations for parameter Order
func (o *V2ListEventsParams) validateOrder(formats strfmt.Registry) error {

	if err := validate.EnumCase("order", "query", *o.Order, []interface{}{"ascending", "descending"}, true); err != nil {
		return err
	}

	return nil
}

// bindSeverities binds and validates array parameter Severities from query.
//
// Arrays are parsed according to CollectionFormat: "" (defaults to "csv" when empty).
func (o *V2ListEventsParams) bindSeverities(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var qvSeverities string
	if len(rawData) > 0 {
		qvSeverities = rawData[len(rawData)-1]
	}

	// CollectionFormat:
	severitiesIC := swag.SplitByFormat(qvSeverities, "")
	if len(severitiesIC) == 0 {
		return nil
	}

	var severitiesIR []string
	for i, severitiesIV := range severitiesIC {
		severitiesI := severitiesIV

		if err := validate.EnumCase(fmt.Sprintf("%s.%v", "severities", i), "query", severitiesI, []interface{}{"info", "warning", "error", "critical"}, true); err != nil {
			return err
		}

		severitiesIR = append(severitiesIR, severitiesI)
	}

	o.Severities = severitiesIR

	return nil
}
