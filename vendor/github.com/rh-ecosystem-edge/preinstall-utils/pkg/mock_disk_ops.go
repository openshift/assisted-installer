// Code generated by MockGen. DO NOT EDIT.
// Source: disk_ops.go
//
// Generated by this command:
//
//	mockgen -source=disk_ops.go -package=shared_ops -destination=mock_disk_ops.go
//
// Package shared_ops is a generated GoMock package.
package shared_ops

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDiskOps is a mock of DiskOps interface.
type MockDiskOps struct {
	ctrl     *gomock.Controller
	recorder *MockDiskOpsMockRecorder
}

// MockDiskOpsMockRecorder is the mock recorder for MockDiskOps.
type MockDiskOpsMockRecorder struct {
	mock *MockDiskOps
}

// NewMockDiskOps creates a new mock instance.
func NewMockDiskOps(ctrl *gomock.Controller) *MockDiskOps {
	mock := &MockDiskOps{ctrl: ctrl}
	mock.recorder = &MockDiskOpsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiskOps) EXPECT() *MockDiskOpsMockRecorder {
	return m.recorder
}

// CleanRaidMembership mocks base method.
func (m *MockDiskOps) CleanRaidMembership(device string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanRaidMembership", device)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanRaidMembership indicates an expected call of CleanRaidMembership.
func (mr *MockDiskOpsMockRecorder) CleanRaidMembership(device any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanRaidMembership", reflect.TypeOf((*MockDiskOps)(nil).CleanRaidMembership), device)
}

// GetRaidDevices mocks base method.
func (m *MockDiskOps) GetRaidDevices(device string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRaidDevices", device)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRaidDevices indicates an expected call of GetRaidDevices.
func (mr *MockDiskOpsMockRecorder) GetRaidDevices(device any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRaidDevices", reflect.TypeOf((*MockDiskOps)(nil).GetRaidDevices), device)
}

// GetVolumeGroupsByDisk mocks base method.
func (m *MockDiskOps) GetVolumeGroupsByDisk(diskName string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeGroupsByDisk", diskName)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeGroupsByDisk indicates an expected call of GetVolumeGroupsByDisk.
func (mr *MockDiskOpsMockRecorder) GetVolumeGroupsByDisk(diskName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeGroupsByDisk", reflect.TypeOf((*MockDiskOps)(nil).GetVolumeGroupsByDisk), diskName)
}

// IsRaidMember mocks base method.
func (m *MockDiskOps) IsRaidMember(device string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRaidMember", device)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsRaidMember indicates an expected call of IsRaidMember.
func (mr *MockDiskOpsMockRecorder) IsRaidMember(device any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRaidMember", reflect.TypeOf((*MockDiskOps)(nil).IsRaidMember), device)
}

// LSBLK mocks base method.
func (m *MockDiskOps) LSBLK(device string) ([]*BlockDevice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LSBLK", device)
	ret0, _ := ret[0].([]*BlockDevice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LSBLK indicates an expected call of LSBLK.
func (mr *MockDiskOpsMockRecorder) LSBLK(device any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LSBLK", reflect.TypeOf((*MockDiskOps)(nil).LSBLK), device)
}

// RemoveAllDMDevicesOnDisk mocks base method.
func (m *MockDiskOps) RemoveAllDMDevicesOnDisk(diskName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAllDMDevicesOnDisk", diskName)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAllDMDevicesOnDisk indicates an expected call of RemoveAllDMDevicesOnDisk.
func (mr *MockDiskOpsMockRecorder) RemoveAllDMDevicesOnDisk(diskName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAllDMDevicesOnDisk", reflect.TypeOf((*MockDiskOps)(nil).RemoveAllDMDevicesOnDisk), diskName)
}

// RemoveAllPVsOnDevice mocks base method.
func (m *MockDiskOps) RemoveAllPVsOnDevice(diskName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAllPVsOnDevice", diskName)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAllPVsOnDevice indicates an expected call of RemoveAllPVsOnDevice.
func (mr *MockDiskOpsMockRecorder) RemoveAllPVsOnDevice(diskName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAllPVsOnDevice", reflect.TypeOf((*MockDiskOps)(nil).RemoveAllPVsOnDevice), diskName)
}

// RemovePV mocks base method.
func (m *MockDiskOps) RemovePV(pvName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePV", pvName)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemovePV indicates an expected call of RemovePV.
func (mr *MockDiskOpsMockRecorder) RemovePV(pvName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePV", reflect.TypeOf((*MockDiskOps)(nil).RemovePV), pvName)
}

// RemoveVG mocks base method.
func (m *MockDiskOps) RemoveVG(vgName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveVG", vgName)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveVG indicates an expected call of RemoveVG.
func (mr *MockDiskOpsMockRecorder) RemoveVG(vgName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveVG", reflect.TypeOf((*MockDiskOps)(nil).RemoveVG), vgName)
}

// Wipefs mocks base method.
func (m *MockDiskOps) Wipefs(device string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wipefs", device)
	ret0, _ := ret[0].(error)
	return ret0
}

// Wipefs indicates an expected call of Wipefs.
func (mr *MockDiskOpsMockRecorder) Wipefs(device any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wipefs", reflect.TypeOf((*MockDiskOps)(nil).Wipefs), device)
}

// MockCleanupDevice is a mock of CleanupDevice interface.
type MockCleanupDevice struct {
	ctrl     *gomock.Controller
	recorder *MockCleanupDeviceMockRecorder
}

// MockCleanupDeviceMockRecorder is the mock recorder for MockCleanupDevice.
type MockCleanupDeviceMockRecorder struct {
	mock *MockCleanupDevice
}

// NewMockCleanupDevice creates a new mock instance.
func NewMockCleanupDevice(ctrl *gomock.Controller) *MockCleanupDevice {
	mock := &MockCleanupDevice{ctrl: ctrl}
	mock.recorder = &MockCleanupDeviceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCleanupDevice) EXPECT() *MockCleanupDeviceMockRecorder {
	return m.recorder
}

// CleanupInstallDevice mocks base method.
func (m *MockCleanupDevice) CleanupInstallDevice(device string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanupInstallDevice", device)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanupInstallDevice indicates an expected call of CleanupInstallDevice.
func (mr *MockCleanupDeviceMockRecorder) CleanupInstallDevice(device any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanupInstallDevice", reflect.TypeOf((*MockCleanupDevice)(nil).CleanupInstallDevice), device)
}
