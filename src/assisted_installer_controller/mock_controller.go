// Code generated by MockGen. DO NOT EDIT.
// Source: assisted_installer_controller.go
//
// Generated by this command:
//
//	mockgen -source=assisted_installer_controller.go -package=assisted_installer_controller -destination=mock_controller.go
//

// Package assisted_installer_controller is a generated GoMock package.
package assisted_installer_controller

import (
	context "context"
	reflect "reflect"
	sync "sync"

	models "github.com/openshift/assisted-service/models"
	gomock "go.uber.org/mock/gomock"
)

// MockController is a mock of Controller interface.
type MockController struct {
	ctrl     *gomock.Controller
	recorder *MockControllerMockRecorder
}

// MockControllerMockRecorder is the mock recorder for MockController.
type MockControllerMockRecorder struct {
	mock *MockController
}

// NewMockController creates a new mock instance.
func NewMockController(ctrl *gomock.Controller) *MockController {
	mock := &MockController{ctrl: ctrl}
	mock.recorder = &MockControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockController) EXPECT() *MockControllerMockRecorder {
	return m.recorder
}

// GetStatus mocks base method.
func (m *MockController) GetStatus() *ControllerStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatus")
	ret0, _ := ret[0].(*ControllerStatus)
	return ret0
}

// GetStatus indicates an expected call of GetStatus.
func (mr *MockControllerMockRecorder) GetStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockController)(nil).GetStatus))
}

// HackDNSAddressConflict mocks base method.
func (m *MockController) HackDNSAddressConflict(wg *sync.WaitGroup) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HackDNSAddressConflict", wg)
}

// HackDNSAddressConflict indicates an expected call of HackDNSAddressConflict.
func (mr *MockControllerMockRecorder) HackDNSAddressConflict(wg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HackDNSAddressConflict", reflect.TypeOf((*MockController)(nil).HackDNSAddressConflict), wg)
}

// PostInstallConfigs mocks base method.
func (m *MockController) PostInstallConfigs(ctx context.Context, wg *sync.WaitGroup) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PostInstallConfigs", ctx, wg)
}

// PostInstallConfigs indicates an expected call of PostInstallConfigs.
func (mr *MockControllerMockRecorder) PostInstallConfigs(ctx, wg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostInstallConfigs", reflect.TypeOf((*MockController)(nil).PostInstallConfigs), ctx, wg)
}

// SetReadyState mocks base method.
func (m *MockController) SetReadyState() *models.Cluster {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetReadyState")
	ret0, _ := ret[0].(*models.Cluster)
	return ret0
}

// SetReadyState indicates an expected call of SetReadyState.
func (mr *MockControllerMockRecorder) SetReadyState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReadyState", reflect.TypeOf((*MockController)(nil).SetReadyState))
}

// UpdateBMHs mocks base method.
func (m *MockController) UpdateBMHs(ctx context.Context, wg *sync.WaitGroup) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateBMHs", ctx, wg)
}

// UpdateBMHs indicates an expected call of UpdateBMHs.
func (mr *MockControllerMockRecorder) UpdateBMHs(ctx, wg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBMHs", reflect.TypeOf((*MockController)(nil).UpdateBMHs), ctx, wg)
}

// UpdateNodeLabels mocks base method.
func (m *MockController) UpdateNodeLabels(ctx context.Context, wg *sync.WaitGroup) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateNodeLabels", ctx, wg)
}

// UpdateNodeLabels indicates an expected call of UpdateNodeLabels.
func (mr *MockControllerMockRecorder) UpdateNodeLabels(ctx, wg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNodeLabels", reflect.TypeOf((*MockController)(nil).UpdateNodeLabels), ctx, wg)
}

// UploadLogs mocks base method.
func (m *MockController) UploadLogs(ctx context.Context, wg *sync.WaitGroup, invoker string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UploadLogs", ctx, wg, invoker)
}

// UploadLogs indicates an expected call of UploadLogs.
func (mr *MockControllerMockRecorder) UploadLogs(ctx, wg, invoker any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadLogs", reflect.TypeOf((*MockController)(nil).UploadLogs), ctx, wg, invoker)
}

// WaitAndUpdateNodesStatus mocks base method.
func (m *MockController) WaitAndUpdateNodesStatus(ctx context.Context, wg *sync.WaitGroup, removeUninitializedTaint bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WaitAndUpdateNodesStatus", ctx, wg, removeUninitializedTaint)
}

// WaitAndUpdateNodesStatus indicates an expected call of WaitAndUpdateNodesStatus.
func (mr *MockControllerMockRecorder) WaitAndUpdateNodesStatus(ctx, wg, removeUninitializedTaint any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitAndUpdateNodesStatus", reflect.TypeOf((*MockController)(nil).WaitAndUpdateNodesStatus), ctx, wg, removeUninitializedTaint)
}
