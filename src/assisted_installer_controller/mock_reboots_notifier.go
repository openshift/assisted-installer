// Code generated by MockGen. DO NOT EDIT.
// Source: reboots_notifier.go
//
// Generated by this command:
//
//	mockgen -source=reboots_notifier.go -package=assisted_installer_controller -destination=mock_reboots_notifier.go
//

// Package assisted_installer_controller is a generated GoMock package.
package assisted_installer_controller

import (
	context "context"
	reflect "reflect"

	strfmt "github.com/go-openapi/strfmt"
	gomock "go.uber.org/mock/gomock"
)

// MockRebootsNotifier is a mock of RebootsNotifier interface.
type MockRebootsNotifier struct {
	ctrl     *gomock.Controller
	recorder *MockRebootsNotifierMockRecorder
}

// MockRebootsNotifierMockRecorder is the mock recorder for MockRebootsNotifier.
type MockRebootsNotifierMockRecorder struct {
	mock *MockRebootsNotifier
}

// NewMockRebootsNotifier creates a new mock instance.
func NewMockRebootsNotifier(ctrl *gomock.Controller) *MockRebootsNotifier {
	mock := &MockRebootsNotifier{ctrl: ctrl}
	mock.recorder = &MockRebootsNotifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRebootsNotifier) EXPECT() *MockRebootsNotifierMockRecorder {
	return m.recorder
}

// Finalize mocks base method.
func (m *MockRebootsNotifier) Finalize() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Finalize")
}

// Finalize indicates an expected call of Finalize.
func (mr *MockRebootsNotifierMockRecorder) Finalize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Finalize", reflect.TypeOf((*MockRebootsNotifier)(nil).Finalize))
}

// Start mocks base method.
func (m *MockRebootsNotifier) Start(ctx context.Context, nodeName string, hostId, infraenvId, clusterId *strfmt.UUID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start", ctx, nodeName, hostId, infraenvId, clusterId)
}

// Start indicates an expected call of Start.
func (mr *MockRebootsNotifierMockRecorder) Start(ctx, nodeName, hostId, infraenvId, clusterId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockRebootsNotifier)(nil).Start), ctx, nodeName, hostId, infraenvId, clusterId)
}
