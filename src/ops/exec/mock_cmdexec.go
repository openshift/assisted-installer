// Code generated by MockGen. DO NOT EDIT.
// Source: cmdexec.go

// Package exec is a generated GoMock package.
package exec

import (
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockExcecutor is a mock of Excecutor interface
type MockExcecutor struct {
	ctrl     *gomock.Controller
	recorder *MockExcecutorMockRecorder
}

// MockExcecutorMockRecorder is the mock recorder for MockExcecutor
type MockExcecutorMockRecorder struct {
	mock *MockExcecutor
}

// NewMockExcecutor creates a new mock instance
func NewMockExcecutor(ctrl *gomock.Controller) *MockExcecutor {
	mock := &MockExcecutor{ctrl: ctrl}
	mock.recorder = &MockExcecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockExcecutor) EXPECT() *MockExcecutorMockRecorder {
	return m.recorder
}

// ExecPrivilegeCommand mocks base method
func (m *MockExcecutor) ExecPrivilegeCommand(out io.Writer, command string, args ...string) (string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{out, command}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecPrivilegeCommand", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecPrivilegeCommand indicates an expected call of ExecPrivilegeCommand
func (mr *MockExcecutorMockRecorder) ExecPrivilegeCommand(out, command interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{out, command}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecPrivilegeCommand", reflect.TypeOf((*MockExcecutor)(nil).ExecPrivilegeCommand), varargs...)
}

// ExecCommand mocks base method
func (m *MockExcecutor) ExecCommand(out io.Writer, command string, args ...string) (string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{out, command}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecCommand", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecCommand indicates an expected call of ExecCommand
func (mr *MockExcecutorMockRecorder) ExecCommand(out, command interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{out, command}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecCommand", reflect.TypeOf((*MockExcecutor)(nil).ExecCommand), varargs...)
}

// ExecPrivilegeCommandWithContext mocks base method
func (m *MockExcecutor) ExecPrivilegeCommandWithContext(cmdctx *CmdContext, command string, args ...string) (string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{cmdctx, command}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecPrivilegeCommandWithContext", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecPrivilegeCommandWithContext indicates an expected call of ExecPrivilegeCommandWithContext
func (mr *MockExcecutorMockRecorder) ExecPrivilegeCommandWithContext(cmdctx, command interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{cmdctx, command}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecPrivilegeCommandWithContext", reflect.TypeOf((*MockExcecutor)(nil).ExecPrivilegeCommandWithContext), varargs...)
}

// ExecCommandWithContext mocks base method
func (m *MockExcecutor) ExecCommandWithContext(cmdctx *CmdContext, command string, args ...string) (string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{cmdctx, command}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecCommandWithContext", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecCommandWithContext indicates an expected call of ExecCommandWithContext
func (mr *MockExcecutorMockRecorder) ExecCommandWithContext(cmdctx, command interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{cmdctx, command}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecCommandWithContext", reflect.TypeOf((*MockExcecutor)(nil).ExecCommandWithContext), varargs...)
}
